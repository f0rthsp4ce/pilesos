<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
  <title>Robot Control</title>
  <!-- Include NippleJS -->
  <script src="/static/nipplejs.js"></script>

  <style>
    /* colors */
    :root {
      --bg: black;
      --accent: lawngreen;
      --text: white;
    }

    html {
      background-color: var(--bg);
      color: var(--text);
      font-family: Arial, Helvetica, sans-serif;
      font-size: large;
    }

    button,
    input,
    label.checkbox-button {
      min-height: 2rem;
      min-width: 2rem;
      font-size: large;
      color: var(--accent);
      background-color: var(--bg);
      border: 2px solid var(--accent);
      padding: 1rem;
    }

    button:active {
      color: var(--bg);
      background-color: var(--accent);
    }

    /* checkbox buttons */
    input[type="checkbox"] {
      display: none;
    }

    label.checkbox-button {
      background-color: var(--bg);
      color: var(--accent);
      cursor: pointer;
    }

    /* Change button color when checkbox is checked */
    input[type="checkbox"]:checked+label.checkbox-button {
      background-color: var(--accent);
      color: var(--bg);
    }

    /* prevent mobile browsers from selecting text when using joystick and controls */
    html {
      -webkit-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }

    *:not(#joystickController) {
      touch-action: manipulation;

    }

    /* controls placement */
    #camera {
      max-width: 100%;
      height: auto;
    }

    .control {
      margin: 2rem;
      box-sizing: border-box;
    }
  </style>
</head>

<body>

  <div>
    <img id="camera" src="#" alt="Camera">
  </div>


  <div class="control-container">
    <div>
      <h3>Battery Charge: <span id="batteryIndicator">100%</span></h3>
    </div>

    <div class="control">
      <button id="buzzerButton">Buzzer</button>
    </div>

    <div class="control">
      <input type="checkbox" id="lightsSwitch">
      <label for="lightsSwitch" class="checkbox-button">Lights</label>
    </div>
  </div>

  <div id="joystickContainer"></div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Update camera stream url
      document.getElementById("camera").src = `http://${window.location.host}:8001/stream`

      // Define global input state
      var state = {
        joystick: { x: 0, y: 0 },
        switches: {
          lights: false,
        },
        buttons: {
          buzzer: false,
        }
      };

      // Function to send the whole state of inputs to the server
      function sendState(overrides = {}) {
        const finalState = { ...state, ...overrides };
        const payload = JSON.stringify(finalState);
        // console.debug("sent: ", payload);
        socket.send(payload);
      }

      // Define control elements
      const joystickContainer = document.getElementById('joystickContainer');
      const buzzerButton = document.getElementById('buzzerButton');
      const lightsSwitch = document.getElementById('lightsSwitch');

      // Define telemetry elements
      const batteryIndicator = document.getElementById('batteryIndicator');

      // Connect to the WebSocket server
      const socket = new WebSocket(`ws://${window.location.host}/ws`);
      socket.addEventListener('error', function (event) {
        console.error('WebSocket error:', event);
      });
      window.addEventListener('unload', function () {
        socket.close();
      });

      // Telemetry receiver
      socket.addEventListener('message', function (event) {
        // console.debug("recv: ", event.data);
        const telemetry = JSON.parse(event.data);
        batteryIndicator.textContent = `${telemetry.battery_percentage}%`;
      });

      // Initialize NippleJS
      const joystick_manager = nipplejs.create({
        zone: joystickContainer,
        mode: 'static',
        position: { bottom: '25%', right: '25%' },
        color: 'green',
        restJoystick: true,
      });

      // Event listener for joystick movement
      joystick_manager.on('move', function () {
        state.joystick = joystick_manager[0].frontPosition;
        sendState();
      });
      joystick_manager.on('end', function () {
        state.joystick = { x: 0, y: 0 };
        sendState();
      });

      // Button events
      function handleButtonPress() {
        buzzerButton.classList.add('active');
        state.buttons.buzzer = true;
        sendState();
      }
      function handleButtonRelease() {
        buzzerButton.classList.remove('active');
        state.buttons.buzzer = false;
        sendState();
      }
      buzzerButton.addEventListener('mousedown', handleButtonPress);
      buzzerButton.addEventListener('touchstart', handleButtonPress);
      buzzerButton.addEventListener('mouseup', handleButtonRelease);
      buzzerButton.addEventListener('touchend', handleButtonRelease);

      // Switches events
      lightsSwitch.addEventListener('change', function () {
        sendState();
      });

    });
  </script>

</body>

</html>