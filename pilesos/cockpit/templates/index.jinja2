<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
  <title>Robot Control</title>
  <!-- Include NippleJS -->
  <script src="/static/nipplejs.js"></script>

  <!-- Reset CSS -->
  <link rel="stylesheet" href="/static/normalize.css">
  <style>
    /* colors */
    :root {
      --bg: black;
      --accent: white;
      --secondary: gray;
      --active: white;
      --text: white;
      --container: #222;
    }

    html {
      background-color: var(--bg);
      color: var(--text);
      font-family: monospace;
    }

    .control-container {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
    }

    .control-block {
      flex: 1;
      background-color: var(--container);
      padding: 0.5rem;
      border-radius: 0.5rem;
      margin: 0.5rem;
    }

    .control-block>p {
      margin-left: 0.5rem;
      margin-right: 0.5rem;
    }

    /* Button style */
    button,
    input,
    label.checkbox-button {
      display: inline-block;
      font-size: large;
      border: 2px solid;
      border-radius: 0.5rem;
      padding: 0.5rem;
      margin: 0.25rem;
    }

    /* Checkbox button */
    input[type="checkbox"] {
      display: none;
    }

    label.checkbox-button {
      cursor: pointer;
    }

    /* controls placement */
    #camera {
      min-width: 60vw;
      max-width: 100%;
      max-height: 70vw;
    }


    .joystick-box {
      display: flex;
      min-height: 10rem;
      min-width: 10rem;
      justify-content: center;
      align-items: center;
    }


    #joystick {
      position: relative;
    }

    /* Button colors */
    button,
    input,
    label.checkbox-button {
      color: var(--accent);
      background-color: var(--bg);
      border-color: var(--accent);
      text-align: center;
    }

    button:active {
      border-color: var(--active);
      color: var(--bg);
      background-color: var(--active);
    }

    /* Checkbox button colors */
    label.checkbox-button {
      border-color: var(--secondary);
    }

    /* Change button color when checkbox is checked */
    input[type="checkbox"]:checked+label.checkbox-button {
      background-color: var(--accent);
      color: var(--bg);
      border-color: var(--accent);
    }

    /* prevent mobile browsers from selecting text when using joystick and controls */
    * {
      -webkit-user-select: none !important;
      -ms-user-select: none !important;
      -moz-user-select: none !important;
      user-select: none !important;
      -webkit-touch-callout: none !important;
      -webkit-user-drag: none !important;
      touch-action: manipulation;
    }
  </style>
</head>

<body>




  <div class="control-container">
    <div class="control-block">
      <img id="camera" src="#" alt="Camera">
    </div>

    <div class="control-block">
      <div id="joystick" class="joystick-box">
      </div>
    </div>



    <div class="control-block">
      <button id="buzzerButton">ðŸ”Š Buzz</button>
    </div>

    <div class="control-block">
      <input type="checkbox" id="lightsSwitch">
      <label for="lightsSwitch" class="checkbox-button">ðŸ’¡ Light</label>
    </div>

    <div class="control-block">
      <p>ðŸ”‹ Battery: <span id="batteryIndicator">100%</span></p>
      <p>ðŸ”Œ Charging: <span id="chargingIndcator">No</span></p>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Update camera stream url
      document.getElementById("camera").src = `http://${window.location.host}:8001/stream`

      // Function to send the whole state of inputs to the server
      function sendControl(control) {
        const payload = JSON.stringify(control);
        console.debug("sent: ", payload);
        socket.send(payload);
      }

      // Define control elements
      const joystick = document.getElementById('joystick');
      const buzzerButton = document.getElementById('buzzerButton');
      const lightsSwitch = document.getElementById('lightsSwitch');

      // Define telemetry elements
      const batteryIndicator = document.getElementById('batteryIndicator');

      // Connect to the WebSocket server
      const socket = new WebSocket(`ws://${window.location.host}/ws`);
      socket.addEventListener('error', function (event) {
        console.error('WebSocket error:', event);
      });
      window.addEventListener('unload', function () {
        socket.close();
      });

      // Telemetry receiver
      socket.addEventListener('message', function (event) {
        // console.debug("recv: ", event.data);
        const telemetry = JSON.parse(event.data);
        batteryIndicator.textContent = `${telemetry.battery_percentage}%`;
      });

      // Initialize NippleJS
      const joystick_manager = nipplejs.create({
        zone: document.getElementById("joystick"),
        mode: 'static',
        color: getComputedStyle(document.documentElement).getPropertyValue('--accent'),
        restJoystick: true,
        dynamicPage: true,
      });

      // Event listener for joystick movement
      joystick_manager.on('move', function () {
        function filter(value) {
          // joystick max tilt in any direction
          let value_max = 50;
          // filtering strength
          let exp = 1.5;
          // process negative tilt as well, save original number sign
          let orig_sign = Math.sign(value);
          value = Math.abs(value);
          // calculate filtered value
          let powed = Math.pow(value, 1.5) || 0;
          // limit to original range of values
          let pow_maximum = Math.pow(value_max, exp);
          let limited = powed / pow_maximum * value_max;
          // restore original sign
          return orig_sign * limited;
        }
        sendControl({
          joystick: {
            x: filter(joystick_manager[0].frontPosition.x),
            y: filter(joystick_manager[0].frontPosition.y)
          }
        });
      });
      joystick_manager.on('end', function () {
        sendControl({
          joystick: { x: 0, y: 0 }
        });
      });

      // Button events
      function handleButtonPress() {
        buzzerButton.classList.add('active');
        sendControl({ buttons: { buzzer: true } });
      }
      function handleButtonRelease() {
        buzzerButton.classList.remove('active');
        sendControl({ buttons: { buzzer: false } });
      }
      buzzerButton.addEventListener('mousedown', handleButtonPress);
      buzzerButton.addEventListener('touchstart', handleButtonPress);
      buzzerButton.addEventListener('mouseup', handleButtonRelease);
      buzzerButton.addEventListener('touchend', handleButtonRelease);

      // Switches events
      lightsSwitch.addEventListener('change', function () {
        sendControl({ switches: { lights: lightsSwitch.checked } });
      });

    });
  </script>

</body>

</html>